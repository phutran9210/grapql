type Role {
  id: ID!
  name: String!
  description: String
}

input CreateRoleInput {
  exampleField: Int
}

input UpdateRoleInput {
  id: Int!
}

type Query {
  roles: [Role]!
  role(id: Int!): Role
  findAll: [User!]!
  findOne(id: ID!): User
}

type Mutation {
  createRole(createRoleInput: CreateRoleInput!): Role!
  updateRole(updateRoleInput: UpdateRoleInput!): Role!
  removeRole(id: Int!): Role
  setRolesToUser(userId: Int!, roleIds: [Int]!): [Role]!
  removeRolesFromUser(userId: Int!, roleIds: [Int]!): [Role]!
  createUser(createUserInput: CreateUserInput): User!
  updateUser(id: ID!, updateUserInput: UpdateUserInput): User!
  removeUser(id: ID!): User
}

scalar Date

type PageInfo {
  total: Int!
  limit: Int!
  offset: Int!
}

type User {
  id: ID!
  username: String!
  is_active: Boolean!
  displayName: String!
  created_at: Date!
  updated_at: Date!
  roles: [Role]!
}

input CreateUserInput {
  username: String!
  displayName: String!
  password: String!
}

input UpdateUserInput {
  username: String
  displayName: String
}

schema {
  query: Query
  mutation: Mutation
}